[
  {
    "name": "Base64",
    "comment": " Library for base64 encoding and decoding.\n\n@docs encode, decode\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "decode",
        "comment": " Decode Base64-encoded strings into Elm strings.\n\n    decode \"SGVsbG8gd29ybGQh\"\n    --> Ok \"Hello world!\"\n\nWhen decoding fails, an `Err` is returned to explain what went wrong. Currently,\nthis may happen under two separate circumstances: either the input is not a\nvalid Base64 string, or it contains invalid character sequences that cannot be\nconverted to an UTF-16 string.\n\n    decode \"What is this\"\n    --> Err \"Invalid base64\"\n\n    decode \"/Ng9\"\n    --> Err \"Invalid UTF-16\"\n\nDecoding assumes that the Base64 was encoded from an UTF-8 string. Note that\nthis library converts the input to UTF-8 when encoding, so decoding should\nalways succeed with strings generated by `encode`. Trailing `=` characters\nmay be omitted.\n\n    decode \"8J+RjQ\"\n    --> Ok \"👍\"\n\n    decode \"8J+RjQ==\"\n    --> Ok \"👍\"\n\n",
        "type": "String -> Result.Result String String"
      },
      {
        "name": "encode",
        "comment": " Encode any Elm string in Base64.\n\n    encode \"Hello world!\"\n    --> \"SGVsbG8gd29ybGQh\"\n\nThe encoding process appends `=` or `==` so that the resulting string's length\nis always a multiple of 4. This is sometimes referred to as _padded encoding_.\n\n    encode \"Hi\"\n    --> \"SGk=\"\n\nDuring encoding, strings are converted to UTF-8. The encoder correctly handles\nany valid Elm string, including characters outside the BMP, like Emoji.\n\n    encode \"👍\"\n    --> \"8J+RjQ==\"\n\n",
        "type": "String -> String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]