[
  {
    "name": "Bot",
    "comment": " **An Elm RiveScript library** This library provides an Elm interface for RiveScript built on top of the [rivescript-js](https://github.com/aichaos/rivescript-js) public API.\n\n  The library depends on [ports](https://guide.elm-lang.org/interop/javascript.html#ports) for interop with the rivescript-js library. See the [readme](http://package.elm-lang.org/packages/publeaks/elm-rivescript/latest#Javascript-interop) for instructions on how to wire up these ports in your Elm app, and [elm-rivescript.js](https://github.com/Publeaks/elm-rivescript/blob/master/src/elm-rivescript.js) for a template and instructions on how to wire up these ports on the javascript side.\n\n  Use [`bot name`](#bot) to create a named bot of type [`Bot`](#Bot). Receive replies from your bot by subscribing to [`listen msg`](#listen). You can subsequenty query the bot for a reply with [`reply message bot`](#reply).\n\n  The library supports multiple bots. See the documentation of [`Farm`](#Farm) to learn more about managing conversation state when there's more than one bot in your bot farm.\n\n# State\n\nCreate bots and manage the state of those bots.\n\n@docs Bot\n\n@docs Farm\n\n@docs bot\n\n@docs name\n\n# Conversation\n\nQuery bots and listen to receive replies.\n\n@docs reply\n\n@docs listen\n",
    "aliases": [
      {
        "name": "Farm",
        "comment": " A `Farm` is a collection of zero or more `Bot`. Bots come in farms, not in armies. I'm no believer of the bot apocalyse.\n\n  The `Farm` type is provided for convenience. The library has no facilities for managing the state of a farm of bots. The [`List`](http://package.elm-lang.org/packages/elm-lang/core/latest/List) module provides all the functionality you need to manage a bot farm.\n\n  Bots are identified by name; the `name` field is used as a unique identifier. **In order for a farm to remain internally consistent, you must avoid duplicate names.**\n\n  Both [`reply`](#reply) and [`listen`](#listen) return a bot as part of the return value. This bot is always newly created internally with [`bot`](#bot). The name of this bot corresponds to the name of the bot that was queried ([`reply`](#reply)), or that submits a reply ([`listen`](#listen)). Use this bot to update (*insert-or-replace*) your bot farm.\n",
        "args": [],
        "type": "List Bot.Bot"
      }
    ],
    "types": [
      {
        "name": "Bot",
        "comment": " A record of type `Bot` encapsulsates the internal state of a bot. Use [`bot : String -> Bot`](#bot) to create a new bot.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "bot",
        "comment": " Create a new named bot. See also [`name`](#name).\n\n    bot \"Marvin\" == Bot\n    name (bot \"Marvin\") == \"Marvin\"\n",
        "type": "String -> Bot.Bot"
      },
      {
        "name": "listen",
        "comment": " Subscribe to replies from your bot.\n\n  Returns `Ok ( reply, bot )` when a reply arrives from the RiveScript interpreter. You must update your application state to replace your bot with the bot returned to you.\n\n  Returns `Err \"Bad javascript input (bot name or reply)\"` if the RiveScript interpreter either returns no bot name or returns no reply. If elm-rivescript is wired up correctly on the javascript side this **should** never occur.\n\n    listen from (\\Result error (reply, bot) -> msg) == Sub msg\n\n  Where `from` is an incoming port of type:\n\n    port from : (Array.Array String -> msg) -> Sub msg\n",
        "type": "((Array.Array String -> ( Maybe.Maybe String, Maybe.Maybe String )) -> Platform.Sub.Sub ( Maybe.Maybe String, Maybe.Maybe String )) -> (Result.Result String ( String, Bot.Bot ) -> a) -> Platform.Sub.Sub a"
      },
      {
        "name": "name",
        "comment": " Query the name of your bot.\n\n    name (bot \"Marvin\") == \"Marvin\"\n",
        "type": "Bot.Bot -> String"
      },
      {
        "name": "reply",
        "comment": " Request replies from your bot.\n\n  You must update your application state to replace your bot with the bot returned to you. You must also pass the command returned to you to the Elm runtime for your query to be submitted to the RiveScript interpreter.\n\n    reply to \"Hello, Bot!\" (bot \"Marvin\") == ( Bot, Cmd msg )\n\n  Where `to` is an outgoing port of type:\n\n    port to : List String -> Cmd msg\n",
        "type": "(List String -> Platform.Cmd.Cmd a) -> String -> Bot.Bot -> ( Bot.Bot, Platform.Cmd.Cmd a )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]