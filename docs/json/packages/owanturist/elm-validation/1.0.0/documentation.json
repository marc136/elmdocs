[
  {
    "name": "Validation",
    "comment": " A data type representing the validity and error state of data, for example\nuser-supplied input, with functions for combining results.\n\nThere are various ways of using the tools this library provides. The recommended\nway is to _store ValidationResult state in your model_, in much the same way\nas you store [RemoteData] in your model.\n\nThis means your _form_ model is separate from the _validated\ndata_ model, and you typically need to map the form into the validated model\n(see example below).\n\nAlthough this may seem awkward or \"too much boilerplate\", particularly if\nyour forms have many fields, it is not surprising. Unless you can prevent\ninvalid input altogether, _as the user enters it_, you have to retain it\nsomewhere in order to render it and report back to the user what the issues\nare. And the shape of the (possibly invalid) input data is _necessarily_ going\nto be different from the shape of valid data.\n\n\n## A simple example\n\nHere's a simple example: a 'required' (String) input field, showing an\nerror message below the input field as the user types.\n\nFirst, define a form model with the field to be validated wrapped in a\n`ValidationResult`:\n\n    type alias Model =\n        { input : ValidationResult String }\n\nIn your view,\n\n1.  pipe input through a validation function and into your update\n2.  set the value to either the validated or the last-entered input\n3.  display any error message below the input element\n\n```\nview : Model -> Html Msg\nview form =\n    -- ...\n    div []\n        [ input\n            [ type_ \"text\"\n            , value (Validation.toString identity form.input)\n\n            -- (2.)\n            , onInput (SetInput << Validation.validate isRequired)\n\n            -- (1.)\n            ]\n            []\n        , div\n            [ class \"error\" ]\n            [ text\n                (Maybe.withDefault \"\" <| Validation.message form.input)\n\n            -- (3.)\n            ]\n        ]\n```\n\n(Note: often you will want an `onBlur` event as well, but this is left as an\nexercise for the reader.)\n\nYour validation functions are defined as `val -> Result String val`:\n\n    isRequired : String -> Result String String\n    isRequired str =\n        if String.length str < 1 then\n            Err \"Required\"\n        else\n            Ok str\n\n\n## Combining validation results\n\nTypically, you want to combine validation results of several fields, such that\nif _all_ of the fields are valid, then their values are extracted and the\nunderlying model is updated, perhaps via a remote http call.\n\nThis library provides `andMap`, which allows you to do this (assuming your\nform model is `Form`, and your underlying validated model is `Model`):\n\n    validateForm : Form -> ValidationResult Model\n    validateForm form =\n        Validation.valid Model\n            |> Validation.andMap form.field1\n            |> Validation.andMap form.field2\n\n\n    --...\n\nUsing such a function, you can `Validation.map` the result into encoded form\nand package it into an http call, etc.\n\nNote that this library does not currently support accumulating validation errors\n(e.g. multiple validations). The error message type is fixed as `String`. So\nthe `andMap` example above is not intended to give you a list of errors in the\n`Invalid` case. Instead, it simply returns the first `Initial` or `Invalid` of the\napplied `ValidationResult`s.\n\n[RemoteData]: http://package.elm-lang.org/packages/krisajenkins/remotedata/latest\n\n\n## Basics\n\n@docs ValidationResult\n@docs validate\n@docs valid\n@docs initial\n@docs map\n@docs andThen\n@docs andMap\n@docs mapMessage\n\n\n## Extracting\n\n@docs withDefault\n@docs message\n@docs isValid\n@docs isInvalid\n\n\n## Converting\n\n@docs toString\n\n",
    "aliases": [],
    "types": [
      {
        "name": "ValidationResult",
        "comment": " A wrapped value has three states:\n\n  - `Initial` - Input is initial, and here is the initial data.\n  - `Valid` - Input is valid, and here is the valid (parsed) data.\n  - `Invalid` - Input is invalid, and here is the error message and your last input.\n\n",
        "args": [
          "val"
        ],
        "cases": [
          [
            "Initial",
            [
              "val"
            ]
          ],
          [
            "Valid",
            [
              "val"
            ]
          ],
          [
            "Invalid",
            [
              "String",
              "String"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "andMap",
        "comment": " Put the results of two ValidationResults together.\n\nUseful for merging field ValidationResults into a single 'form'\nValidationResult. See the example above.\n\n",
        "type": "Validation.ValidationResult a -> Validation.ValidationResult (a -> b) -> Validation.ValidationResult b"
      },
      {
        "name": "andThen",
        "comment": " Chain a function returning ValidationResult onto a ValidationResult.\n",
        "type": "(a -> Validation.ValidationResult b) -> Validation.ValidationResult a -> Validation.ValidationResult b"
      },
      {
        "name": "initial",
        "comment": " Put a initial value into ValidationResult.\n",
        "type": "val -> Validation.ValidationResult val"
      },
      {
        "name": "isInvalid",
        "comment": " Return True if and only if `Invalid`. Note `Initial` -> `False`\n(`Initial` is not invalid).\n",
        "type": "Validation.ValidationResult val -> Bool"
      },
      {
        "name": "isValid",
        "comment": " Return True if and only if `Valid`. Note `Initial` -> `False`\n(`Initial` is not valid).\n",
        "type": "Validation.ValidationResult val -> Bool"
      },
      {
        "name": "map",
        "comment": " Map a function into the `Initial` and `Valid` value.\n",
        "type": "(a -> b) -> Validation.ValidationResult a -> Validation.ValidationResult b"
      },
      {
        "name": "mapMessage",
        "comment": " Map over the error message value.\n",
        "type": "(String -> String) -> Validation.ValidationResult val -> Validation.ValidationResult val"
      },
      {
        "name": "message",
        "comment": " Extract the error message of an `Invalid`, or Nothing\n",
        "type": "Validation.ValidationResult val -> Maybe.Maybe String"
      },
      {
        "name": "toString",
        "comment": " Convert the ValidationResult to a String representation:\n\n  - if Initial, convert the initial value to a string with the given function.\n  - if Valid, convert the value to a string with the given function;\n  - if Invalid, return the input (unvalidated) string;\n\nNote: this is mainly useful as a convenience function for setting the `value`\nattribute of an `Html.input` element.\n\n",
        "type": "(val -> String) -> Validation.ValidationResult val -> String"
      },
      {
        "name": "valid",
        "comment": " Put a valid value into a ValidationResult.\n",
        "type": "val -> Validation.ValidationResult val"
      },
      {
        "name": "validate",
        "comment": " Run a validation function on an input string, to create a ValidationResult.\n\nNote the validation function you provide is `String -> Result String val`, where\n`val` is the type of the valid value.\n\nSo a validation function for \"integer less than 10\" looks like:\n\n    lessThanTen : String -> Result String Int\n    lessThanTen input =\n        String.toInt input\n            |> Result.andThen\n                (\\int ->\n                    if i < 10 then\n                        Ok int\n                    else\n                        Err \"Must be less than 10\"\n                )\n\n",
        "type": "(String -> Result.Result String val) -> String -> Validation.ValidationResult val"
      },
      {
        "name": "withDefault",
        "comment": " Extract the `Initial` and `Valid` value, or the given default\n",
        "type": "val -> Validation.ValidationResult val -> val"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]