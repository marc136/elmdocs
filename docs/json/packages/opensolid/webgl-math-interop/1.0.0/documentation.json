[
  {
    "name": "OpenSolid.Interop.WebGLMath.Point3d",
    "comment": " Transformation functions for `Point3d`.\n\n@docs transformBy\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "transformBy",
        "comment": " Transform a `Point3d` by a `Float4x4`;\n\n    point\n        |> Point3d.transformBy matrix\n\nis equivalent to\n\n    point\n        |> Point3d.coordinates\n        |> Matrix4.transform matrix\n        |> Point3d.fromCoordinates\n\nFor example:\n\n    point =\n        Point3d.fromCoordinates ( 2, 1, 3 )\n\n    matrix =\n        Matrix4.makeTranslate ( 3, 4, 5 )\n\n    Point3d.transformBy matrix point\n    --> Point3d.fromCoordinates ( 5, 5, 8 )\n\n",
        "type": "Matrix4.Float4x4 -> OpenSolid.Point3d.Point3d -> OpenSolid.Point3d.Point3d"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "OpenSolid.Interop.WebGLMath.Vector3d",
    "comment": " Transformation functions for `Vector3d`.\n\n@docs transformBy\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "transformBy",
        "comment": " Transform a `Vector3d` by a `Float4x4`; note that\n\n    vector\n        |> Vector3d.transformBy matrix\n\nis similar to but _not_ in general equivalent to\n\n    vector\n        |> Vector3d.components\n        |> Matrix4.transform matrix\n        |> Vector3d.fromComponents\n\nsince `Matrix4.transform` implicitly assumes that the given argument represents\na point, not a vector, and therefore applies translation to it. Transforming a\nvector by a 4x4 matrix should in fact ignore any translation component of the\nmatrix, which this function does. For example:\n\n    vector =\n        Vector3d.fromComponents ( 2, 1, 3 )\n\n    -- 90 degree rotation around the Z axis,\n    -- followed by a translation\n    matrix =\n        Matrix4.makeTranslate ( 5, 5, 5 )\n            |> Matrix4.rotate (degrees 90) ( 0, 0, 1 )\n\n    Vector3d.transformBy matrix vector\n    --> Vector3d.fromComponents ( -1, 2, 3 )\n\n",
        "type": "Matrix4.Float4x4 -> OpenSolid.Vector3d.Vector3d -> OpenSolid.Vector3d.Vector3d"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "OpenSolid.Interop.WebGLMath.Frame2d",
    "comment": " Conversion functions for `Frame2d`.\n\n@docs toFloat3x3\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "toFloat3x3",
        "comment": " Convert a `Frame2d` to a `Float3x3`. The resulting matrix can be thought of\nin a couple of ways:\n\n  - It is the transformation matrix that takes the global XY frame and\n    transforms it to the given frame\n  - It is the transformation matrix from local coordinates in the given frame\n    to global coordinates\n\nThe first bullet implies that something like\n\n    Frame2d.xy\n        |> Frame2d.translateBy displacement\n        |> Frame2d.rotateAround point angle\n        |> Frame2d.mirrorAcross axis\n        |> Frame2d.toFloat3x3\n\ngives you a transformation matrix that is equivalent to applying the given\ndisplacement, then the given rotation, then the given mirror. The second bullet\nmeans that, for example,\n\n    Point2d.placeIn frame\n\nis equivalent to\n\n    Point2d.transformBy (Frame2d.toFloat3x3 frame)\n\n",
        "type": "OpenSolid.Frame2d.Frame2d -> Matrix3.Float3x3"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "OpenSolid.Interop.WebGLMath.Frame3d",
    "comment": " Conversion functions for `Frame3d`.\n\n@docs toFloat4x4\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "toFloat4x4",
        "comment": " Convert a `Frame3d` to a `Float4x4`. The resulting matrix can be thought of\nin a couple of ways:\n\n  - It is the transformation matrix that takes the global XYZ frame and\n    transforms it to the given frame\n  - It is the transformation matrix from local coordinates in the given frame\n    to global coordinates\n\nThe first bullet implies that something like\n\n    Frame3d.xyz\n        |> Frame3d.translateBy displacement\n        |> Frame3d.rotateAround axis angle\n        |> Frame3d.mirrorAcross plane\n        |> Frame3d.toFloat4x4\n\ngives you a transformation matrix that is equivalent to applying the given\ndisplacement, then the given rotation, then the given mirror. The second bullet\nmeans that, for example,\n\n    Point3d.placeIn frame\n\nis equivalent to\n\n    Point3d.transformBy (Frame3d.toFloat4x4 frame)\n\nand\n\n    Point3d.relativeTo frame\n\nis equivalent to\n\n    Point3d.transformBy <|\n        Matrix4.inverseRigidBodyTransform\n            (Frame3d.toFloat4x4 frame)\n\n",
        "type": "OpenSolid.Frame3d.Frame3d -> Matrix4.Float4x4"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "OpenSolid.Interop.WebGLMath.Point2d",
    "comment": " Transformation functions for `Point2d`.\n\n@docs transformBy\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "transformBy",
        "comment": " Transform a `Point2d` by a `Float3x3`;\n\n    point\n        |> Point2d.transformBy matrix\n\nis equivalent to\n\n    point\n        |> Point2d.coordinates\n        |> Matrix3.transform matrix\n        |> Point2d.fromCoordinates\n\nFor example:\n\n    point =\n        Point2d.fromCoordinates ( 2, 1 )\n\n    -- Translation by (5, 5)\n    matrix =\n        ( ( 1, 0, 5 )\n        , ( 0, 1, 5 )\n        , ( 0, 0, 1 )\n        )\n\n    Point2d.transformBy matrix point\n    --> Point2d.fromCoordinates ( 7, 6 )\n\n",
        "type": "Matrix3.Float3x3 -> OpenSolid.Point2d.Point2d -> OpenSolid.Point2d.Point2d"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "OpenSolid.Interop.WebGLMath.Vector2d",
    "comment": " Transformation functions for `Vector2d`.\n\n@docs transformBy\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "transformBy",
        "comment": " Transform a `Vector2d` by a `Float3x3`; note that\n\n    vector\n        |> Vector2d.transformBy matrix\n\nis similar to but _not_ in general equivalent to\n\n    vector\n        |> Vector2d.components\n        |> Matrix3.transform matrix\n        |> Vector2d.fromComponents\n\nsince `Matrix3.transform` implicitly assumes that the given argument represents\na point, not a vector, and therefore applies translation to it. Transforming a\nvector by a 3x3 matrix should in fact ignore any translation component of the\nmatrix, which this function does. For example:\n\n    vector =\n        Vector2d.fromComponents ( 2, 1 )\n\n    -- 90 degree rotation, followed by a translation by (5, 5)\n    matrix =\n        ( ( 0, -1, 5 )\n        , ( 1, 0, 5 )\n        , ( 0, 0, 1 )\n        )\n\n    Vector2d.transformBy matrix vector\n    --> Vector2d.fromComponents ( -1, 2 )\n\n",
        "type": "Matrix3.Float3x3 -> OpenSolid.Vector2d.Vector2d -> OpenSolid.Vector2d.Vector2d"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]