[
  {
    "name": "Parser.Html",
    "comment": " Pre-made parsers to parse & model HTML elements\n\n@docs Node, textNode, elementNode\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Node",
        "comment": " An HTML element\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "elementNode",
        "comment": " Parse an element node\n",
        "type": "Parser.Parser Parser.Html.Node"
      },
      {
        "name": "textNode",
        "comment": " Parse a text node\n",
        "type": "Parser.Parser Parser.Html.Node"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Parser.Number",
    "comment": " Pre-made parsers and helpers to create parsers for numbers\n\n@docs naturalNumber, int, float\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "float",
        "comment": " Parse a float\n",
        "type": "Parser.Parser Float"
      },
      {
        "name": "int",
        "comment": " Parse an integer\n",
        "type": "Parser.Parser Int"
      },
      {
        "name": "naturalNumber",
        "comment": " Parse a natural number\n",
        "type": "Parser.Parser Int"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Parser.String",
    "comment": " Pre-made parsers and helpers to create parsers for strings\n\n@docs string, word\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "string",
        "comment": " Parse a list of characters, and join them into a string. It can be used in a conjunction with `oneOf`\n\n    string <| P.oneOf [ space, alphanumeric ]\n\n",
        "type": "Parser.Parser Char -> Parser.Parser String"
      },
      {
        "name": "word",
        "comment": " Parse an exact word\n\n    word \"hello\"\n\n",
        "type": "String -> Parser.Parser String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Parser.Char",
    "comment": " Pre-made parsers and helpers to create parsers for characters\n\n@docs char, digit, lower, upper, letter, alphanumeric, space, newLine, tab, blankspace, charCustomError\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "alphanumeric",
        "comment": " Parse an alphanumeric character\n",
        "type": "Parser.Parser Char"
      },
      {
        "name": "blankspace",
        "comment": " Parse an space, tab, or newline character\n",
        "type": "Parser.Parser Char"
      },
      {
        "name": "char",
        "comment": " Parsers a single character, if it fails with a default ExpectedSymbol problem\n",
        "type": "Char -> Parser.Parser Char"
      },
      {
        "name": "charCustomError",
        "comment": " Parsers a single character, if it fails it uses the provided problem.\nYou'll usually want to use `char` (see above)\n\nThis is useful when you want to descript more detail about a what you were\nexpecting, or when you want to express something in more natural language like:\n\n",
        "type": "Char -> Parser.Problem -> Parser.Parser Char"
      },
      {
        "name": "digit",
        "comment": " Digit character parser\n",
        "type": "Parser.Parser Char"
      },
      {
        "name": "letter",
        "comment": " Lowercase or uppercase character parser\n",
        "type": "Parser.Parser Char"
      },
      {
        "name": "lower",
        "comment": " Lowercase character parser\n",
        "type": "Parser.Parser Char"
      },
      {
        "name": "newLine",
        "comment": " Parse an newline character\n",
        "type": "Parser.Parser Char"
      },
      {
        "name": "space",
        "comment": " Parse an space character\n",
        "type": "Parser.Parser Char"
      },
      {
        "name": "tab",
        "comment": " Parse an tab character\n",
        "type": "Parser.Parser Char"
      },
      {
        "name": "upper",
        "comment": " Uppercase character parser\n",
        "type": "Parser.Parser Char"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Parser.Combinator",
    "comment": " Helpers to combine parsers\n\n@docs zeroOrMore, oneOrMore, exactly, separateByOne, brackets\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "brackets",
        "comment": " Parse a value, with prefix and postfix parsers\n",
        "type": "Parser.Parser open -> Parser.Parser value -> Parser.Parser close -> Parser.Parser value"
      },
      {
        "name": "exactly",
        "comment": " Run the given parser exactly `n` times\n",
        "type": "Int -> Parser.Parser a -> Parser.Parser (List a)"
      },
      {
        "name": "oneOrMore",
        "comment": " Run the given parser one or more times. This parser will only fail if the the first character fails, otherwise it will run UNTIL failure then succeed\n",
        "type": "Parser.Parser a -> Parser.Parser (List a)"
      },
      {
        "name": "separateByOne",
        "comment": " Parse a sequence of values with the values parser, each separated by\nthe separator parser\n",
        "type": "Parser.Parser value -> Parser.Parser separator -> Parser.Parser (List value)"
      },
      {
        "name": "zeroOrMore",
        "comment": " Run the given parser zero or more times. This parser will always succeed\n",
        "type": "Parser.Parser a -> Parser.Parser (List a)"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Parser",
    "comment": " General parser combinator library for Elm. It also incldues an HTML parser!\n\n\n# Parsing\n\n@docs Parser, run\n\n\n# Chaining\n\n@docs map, map2, (|=), (|*), andThen, oneOf, oneOfBacktrack\n\n\n# Error Handling\n\n@docs Problem, State\n\n\n# Advanced\n\n@docs lazy, succeed, fail\n\n\n# Low Level\n\n@docs item, satisfy\n\n",
    "aliases": [
      {
        "name": "Parser",
        "comment": " The type of a parser. It is a function that will parse a string into the type of `value`.\n",
        "args": [
          "value"
        ],
        "type": "Parser.Internal.Parser Parser.Problem value"
      },
      {
        "name": "State",
        "comment": " The curren state of a parser\n",
        "args": [],
        "type": "Parser.Internal.State"
      }
    ],
    "types": [
      {
        "name": "Problem",
        "comment": " Possible errors that can be encountered while parsing\n",
        "args": [],
        "cases": [
          [
            "BadOneOf",
            [
              "List Parser.Problem"
            ]
          ],
          [
            "BadInt",
            []
          ],
          [
            "Bad",
            [
              "String"
            ]
          ],
          [
            "ExpectedSymbol",
            [
              "String"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "andThen",
        "comment": " Transfrom a parser, based on the result of the previous one\n",
        "type": "(resultA -> Parser.Parser resultB) -> Parser.Parser resultA -> Parser.Parser resultB"
      },
      {
        "name": "fail",
        "comment": " Lift a problem into a parse operation that will always fail\n",
        "type": "Parser.Problem -> Parser.Parser value"
      },
      {
        "name": "item",
        "comment": " Parses a single character, always successful as long at the offset is valid\n",
        "type": "Parser.Parser Char"
      },
      {
        "name": "lazy",
        "comment": " Used to declare a parser in an anonymous function, allowing you to defined\nresusive grammers\n",
        "type": "(() -> Parser.Parser value) -> Parser.Parser value"
      },
      {
        "name": "map",
        "comment": " Transform the result of a parser\n",
        "type": "(valueA -> valueB) -> Parser.Parser valueA -> Parser.Parser valueB"
      },
      {
        "name": "map2",
        "comment": " Transform the reuslt of two parser\n",
        "type": "(valueA -> valueB -> valueC) -> Parser.Parser valueA -> Parser.Parser valueB -> Parser.Parser valueC"
      },
      {
        "name": "oneOf",
        "comment": " Test a list of parser on a state, without backtracking if a parser fails.\nIn the case of\n\n    let\n        state =\n            { source = \"bonasdf\"\n            , offset = 0\n            , row = 0\n            , col = 0\n            }\n    in\n        oneOf [word \"bonjour\", lower] state\n\nThe parser will fail because it starts to correctly parse \"bonjour\", but fails\npart way. Becuase there is no backtracking, and does not revert to `lower` after\n`word \"bonjour\" fails.\n\n",
        "type": "List (Parser.Parser result) -> Parser.Parser result"
      },
      {
        "name": "oneOfBacktrack",
        "comment": " Test a list of parser on a state, WITH backtracking if a parser fails. This\nmeans if the first parser fails, it WILL to back to the beginning and try the\nnext parser\n",
        "type": "List (Parser.Parser result) -> Parser.Parser result"
      },
      {
        "name": "run",
        "comment": " Wrap a source string into a default state\n",
        "type": "Parser.Parser a -> String -> Result.Result ( Parser.State, Parser.Problem ) a"
      },
      {
        "name": "satisfy",
        "comment": " Tests a the parsed character with the function provided, if it return false,\nthen fail with the provided problem\n",
        "type": "(Char -> Bool) -> Parser.Problem -> Parser.Parser Char"
      },
      {
        "name": "succeed",
        "comment": " Lift a value into a parse operation that will always succeed.\n",
        "type": "value -> Parser.Parser value"
      },
      {
        "name": "|*",
        "comment": " Given a `parserA` and `parserB`, run both but only keep the result from `parserB`\n",
        "type": "Parser.Parser keep -> Parser.Parser ignore -> Parser.Parser keep"
      },
      {
        "name": "|=",
        "comment": " Given a `parserA` that contians a function and `parserB` that is regular run\nboth. Apply the result from `parserB` to the function from `parserA`\n",
        "type": "Parser.Parser (a -> b) -> Parser.Parser a -> Parser.Parser b"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]