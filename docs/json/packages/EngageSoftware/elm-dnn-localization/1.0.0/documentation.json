[
  {
    "name": "Engage.Localization",
    "comment": " Helpers for working with DNN Localization for Engage Software team.\n\n\n# Types\n\n@docs Localization\n\n\n# Decoders\n\n@docs decoder\n\n\n# Localization functions\n\n@docs localizeString, localizeStringWithDefault, localizeText, localizeTextWithDefault\n\n",
    "aliases": [
      {
        "name": "Localization",
        "comment": " `Dict` for storing Localization text\n",
        "args": [],
        "type": "Dict.Dict String String"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "decoder",
        "comment": " Decode from JSON values that contains an array of object with `key` and `value` string properties to a `Localization`\n",
        "type": "Json.Decode.Decoder Engage.Localization.Localization"
      },
      {
        "name": "localizeString",
        "comment": " Localize a key using the given `Localization` dict. If the key is not found, this function will return the key value wrapped in `[ ]`.\n\n    myLocalization = Dict.fromList [ (\"FirstName.Text\", \"First Name: \") ]\n\n    localizeString \"FirstName.Text\" { localization = myLocalization } == \"First Name:\"\n    localizeString \"LastName.Text\" { localization = myLocalization } == \"[LastName.Text]\"\n\n",
        "type": "String -> { a | localization : Engage.Localization.Localization } -> String"
      },
      {
        "name": "localizeStringWithDefault",
        "comment": " Try to localize a key using the given `Localization` dict, and if the key is not found, return the given default value.\n\n    myLocalization = Dict.fromList [ (\"FirstName.Text\", \"First Name: \") ]\n\n    localizeStringWithDefault \"First Name\" \"FirstName.Text\" { localization = myLocalization } == \"First Name:\"\n    localizeStringWithDefault \"Last Name\" \"LastName.Text\" { localization = myLocalization } == \"Last Name\"\n\n",
        "type": "String -> String -> { a | localization : Engage.Localization.Localization } -> String"
      },
      {
        "name": "localizeText",
        "comment": " Similar to `localizeText`, but the wrapped the text in `Html.text`\n\n    myLocalization = Dict.fromList [ (\"FirstName.Text\", \"First Name: \") ]\n\n    localizeText \"FirstName.Text\" { localization = myLocalization } == Html.text \"First Name:\"\n    localizeText \"LastName.Text\" { localization = myLocalization } == Html.text \"[LastName.Text]\"\n\n",
        "type": "String -> { a | localization : Engage.Localization.Localization } -> Html.Html msg"
      },
      {
        "name": "localizeTextWithDefault",
        "comment": " Similar to `localizeTextWithDefault`, but the wrapped the text in `Html.text`\n\n    myLocalization = Dict.fromList [ (\"FirstName.Text\", \"First Name: \") ]\n\n    localizeTextWithDefault \"First Name\" \"FirstName.Text\" { localization = myLocalization } == Html.text \"First Name:\"\n    localizeTextWithDefault \"Last Name\" \"LastName.Text\" { localization = myLocalization } == Html.text \"Last Name\"\n\n",
        "type": "String -> String -> { a | localization : Engage.Localization.Localization } -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]