[
  {
    "name": "Pathfinder",
    "comment": " Typesafe eDSL for URL parsing. The library can parse single value, multiple values with a strict or arbitrary order, queries. It also allows writing typesafe parser for a query.\n\n# Parsing nodes\n\nShortcut functions which handle creation of parsing nodes.\n\n@docs int\n    , float\n    , p\n    , str\n    , any\n    , query\n\n# Ordered Dividers\n\nPredefined infix operators for an ordered combination of parsing nodes.\n\n    url = int </> str\n\n    parse url \"10/somevalue\" \n    -- MultiValue [ Integer 10, Str \"somevalue\" ]\n\n    parse url \"somevalue/10\" \n    -- Failuer \"could not convert string 'somevalue' to an Int\"\n\n@docs (</>)\n    , (<=>)\n    , (<?>)\n\n# Unordered Dividers\n\nPredefined infix operators for an unordered combination of parsing nodes.\n\n    url = int <&> str\n\n    parse url \"10&somevalue\" \n    -- MultiValue [ Integer 10, Str \"somevalue\" ]\n\n    parse url \"somevalue&10\" \n    -- MultiValue [ Integer 10, Str \"somevalue\" ]\n\n@docs (<&>)\n    , (<*>)\n    , (<%>)\n\n# Dividers factory\n\nAbstract factories for creation of custom parsing node combinators\n\n@docs orderedDevider\n    , unorderedDevider\n\n# Functions\n\n@docs parse\n    , toString\n\n# Data Structures\n\n@docs  ParsingResult\n    , URL\n    , ParseNode\n",
    "aliases": [],
    "types": [
      {
        "name": "ParseNode",
        "comment": " Parsing options\n",
        "args": [],
        "cases": [
          [
            "ParsePath",
            [
              "String"
            ]
          ],
          [
            "ParseFloat",
            []
          ],
          [
            "ParseInt",
            []
          ],
          [
            "ParseStr",
            []
          ],
          [
            "ParseAny",
            []
          ],
          [
            "ParseQuery",
            []
          ]
        ]
      },
      {
        "name": "ParsingResult",
        "comment": " Possible parsing results\n",
        "args": [],
        "cases": [
          [
            "Integer",
            [
              "Int"
            ]
          ],
          [
            "Floating",
            [
              "Float"
            ]
          ],
          [
            "Str",
            [
              "String"
            ]
          ],
          [
            "MultiValue",
            [
              "List Pathfinder.ParsingResult"
            ]
          ],
          [
            "Failure",
            [
              "String"
            ]
          ],
          [
            "Query",
            [
              "Dict.Dict String String"
            ]
          ],
          [
            "Succes",
            []
          ]
        ]
      },
      {
        "name": "URL",
        "comment": " Parsing tree\n",
        "args": [],
        "cases": [
          [
            "OrderedURL",
            [
              "Char",
              "Pathfinder.URL",
              "Pathfinder.URL"
            ]
          ],
          [
            "UnorderedURL",
            [
              "Char",
              "List Pathfinder.URL"
            ]
          ],
          [
            "NodeURL",
            [
              "Pathfinder.ParseNode"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "<%>",
        "comment": " Infix shortcut for a function which creates an unordered parsing tree from subnodes provided as arguments which are separated by %.\n",
        "type": "Pathfinder.URL -> Pathfinder.URL -> Pathfinder.URL"
      },
      {
        "name": "<&>",
        "comment": " Infix shortcut for a function which creates an unordered parsing tree from subnodes provided as arguments which are separated by &.\n",
        "type": "Pathfinder.URL -> Pathfinder.URL -> Pathfinder.URL"
      },
      {
        "name": "<*>",
        "comment": " Infix shortcut for a function which creates an unordered parsing tree from subnodes provided as arguments which are separated by *.\n",
        "type": "Pathfinder.URL -> Pathfinder.URL -> Pathfinder.URL"
      },
      {
        "name": "</>",
        "comment": " Infix shortcut for a function which creates an ordered parsing tree from subnodes provided as arguments which are separated by /.\n",
        "type": "Pathfinder.URL -> Pathfinder.URL -> Pathfinder.URL"
      },
      {
        "name": "<=>",
        "comment": " Infix shortcut for a function which creates an ordered parsing tree from subnodes provided as arguments which are separated by =.\n",
        "type": "Pathfinder.URL -> Pathfinder.URL -> Pathfinder.URL"
      },
      {
        "name": "<?>",
        "comment": " Infix shortcut for a function which creates an ordered parsing tree from subnodes provided as arguments which are separated by ?.\n",
        "type": "Pathfinder.URL -> Pathfinder.URL -> Pathfinder.URL"
      },
      {
        "name": "any",
        "comment": " A shortcut for creation of a parsing node which skips a part of the path\n\n    parse (int </> any </> float) \"10/some&strange?stuff/3.1415\"\n",
        "type": "Pathfinder.URL"
      },
      {
        "name": "float",
        "comment": " A shortcut for creation of a parsing node for Float\n\n    parse float \"3.1415\" \n",
        "type": "Pathfinder.URL"
      },
      {
        "name": "int",
        "comment": " A shortcut for creation of a parsing node for Int\n\n    parse int \"13\" \n",
        "type": "Pathfinder.URL"
      },
      {
        "name": "orderedDevider",
        "comment": " Creates an ordered parsing tree from subnodes provided as arguments which are separated by specified Char.\n\nIt can be used for the creation of nice infix shortcuts.\n\n    (</>) = orderedDevider '/'\n",
        "type": "Char -> Pathfinder.URL -> Pathfinder.URL -> Pathfinder.URL"
      },
      {
        "name": "p",
        "comment": " A shortcut for creation of a parsing node which specifies precise part of a path\n\n    parse (p \"someUrl\" </> int ) \"someUrl/10\"\n",
        "type": "String -> Pathfinder.URL"
      },
      {
        "name": "parse",
        "comment": " Performs parsing of a string in according to provided parsing tree.\n\n    parse (p \"path\" </> float) \"path/3.1415\"                    -- Floating 3.1415\n    parse (any <?> (p \"name\" <=> str)) \"someStrangeStuff?name   -- Str \"name\"\n    parse (str <&> int) \"19&somePath\"                           -- MultiValue [ Integer 19, String \"somePath\" ]\n    parse (p \"path\" </> any) \"somePath/otherPath\"               -- Succes\n",
        "type": "Pathfinder.URL -> String -> Pathfinder.ParsingResult"
      },
      {
        "name": "query",
        "comment": " A shortcut for creation of a parsing node for an old good url query\n\n    parse (query) \"value1=10&value2=13&value3=name\"\n",
        "type": "Pathfinder.URL"
      },
      {
        "name": "str",
        "comment": " A shortcut for creation of a parsing node for String\n\n    parse str \"name\"\n",
        "type": "Pathfinder.URL"
      },
      {
        "name": "toString",
        "comment": " Create a string which describes the path, it is handy for debugging\n\n    toString (int </> float)  -- ( Int ) / ( Float )\n",
        "type": "Pathfinder.URL -> String"
      },
      {
        "name": "unorderedDevider",
        "comment": " Creates an unordered parsing tree from subnodes provided as arguments which are separated by specified Char.\n\nIt can be used for the creation of nice infix shortcuts.\n\n    (<&>) = unorderedDevider '&'\n",
        "type": "Char -> Pathfinder.URL -> Pathfinder.URL -> Pathfinder.URL"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]